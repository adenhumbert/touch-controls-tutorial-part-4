<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>level = 0;

alarm[0] = 1;
alarm[1] = room_speed * 10;

//Pinch Zoom Vars
pinch = true;                   //pinch controller
initial_w = view_wview[0];      //Initial view width/height
initial_h = view_hview[0];
v_scale = 1;                 //Current scale value
v_dist = 0;                  //Distance bewteen the two touches
v_ang_prev = 0;
v_ang_now = 0;


key_left = virtual_key_add(32, display_get_gui_height() - 160, 64, 64, vk_left);
key_up = virtual_key_add(96, display_get_gui_height() - 224, 64, 64, vk_up);
key_down = virtual_key_add(96, display_get_gui_height() - 96, 64, 64, vk_down);
key_right = virtual_key_add(160, display_get_gui_height() - 160, 64, 64, vk_right);

virtual_key_show(key_left);
virtual_key_show(key_up);
virtual_key_show(key_down);
virtual_key_show(key_right);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spawn barrels

//Check how many barrels exist
if instance_number(obj_Explosive) &lt; 10
{
var xx, yy;
//Set sprite for place meeting checks
sprite_index = spr_Barrel;
//Set random coords
xx = 128 + random(room_width - 256);
yy = 128 + random(room_height - 256);
//Check random coords for collisions
while (place_meeting(xx, yy, obj_Col_Parent) || place_meeting(xx, yy, obj_Player))
    {
    //re-roll random coords
    xx = 128 + random(room_width - 256);
    yy = 128 + random(room_height - 256);
    }
//create barrel
instance_create(xx, yy, obj_Explosive);
//Create spawn effect
with (instance_create(xx, yy, obj_Explosion))
    {
    image_xscale = 0.5;
    image_yscale = 0.5;
    image_blend = c_red;
    }
//Play sound
audio_play_sound(snd_Barrel_Spawn, 0, false);
//reset sprite index
sprite_index = -1;
}

//restart alarm
alarm[1] = room_speed * 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Create the enemy outside of the room
if instance_number(obj_Enemy) &lt; 3
{
repeat(1 + level)
    {
    instance_create(-16 - random(64), (room_height / 2) - 80 + random(160), obj_Enemy);
    instance_create(room_width + 64 + random(64), (room_height / 2) - 80 + random(160), obj_Enemy);
    instance_create((room_width / 2) - 64 + random(128), -16 - random(64), obj_Enemy);
    instance_create((room_height / 2) - 64 + random(128), room_height + 16 + random(64), obj_Enemy); 
    }
level += 1;
}

//Reset the alarm!
alarm[0] = room_speed;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Pinch and zoom controls
var mx0raw, my0raw, mx1raw, my1raw;
mx0raw = device_mouse_raw_x(0);                     //get the "raw" mouse position: ie. The SCREEN position not the room position
my0raw = device_mouse_raw_y(0);
mx1raw = device_mouse_raw_x(1);
my1raw = device_mouse_raw_y(1);

var dx = display_get_width() / 5;
var dy = 0;
var dw = dx * 4;
var dh = display_get_height();

if (mx0raw &gt; dx &amp;&amp; mx0raw &lt; dw &amp;&amp; my0raw &gt; dy &amp;&amp; my0raw &lt; dh) &amp;&amp; (mx1raw &gt; dx &amp;&amp; mx1raw &lt; dw &amp;&amp; my1raw &gt; dy &amp;&amp; my1raw &lt; dh)
{
if device_mouse_check_button(1, mb_left)
    {
    if device_mouse_check_button_pressed(1, mb_left)
        {
        //Set the initial zoom value on pressed 
        v_dist = point_distance(mx0raw, my0raw, mx1raw ,my1raw) * v_scale;
        v_ang_now = point_direction(mx0raw, my0raw, mx1raw ,my1raw);
        v_ang_prev = view_angle[0];
        }
    v_scale = v_dist / max(1, point_distance(mx0raw, my0raw, mx1raw, my1raw));      //Set the scale based on distance difference between the initial zoom and the current one
    if v_scale &lt; 0.5 v_scale = 0.5 else if v_scale &gt; 1.5 v_scale = 1.5;             //Limit the scale
    view_wview[0] = initial_w * v_scale;                                            //Scale the view width and height
    view_hview[0] = initial_h * v_scale;
    view_xview[0] = global.Player_x - (view_wview[0] / 2);                          //Place the view x/y position correctly
    view_yview[0] = global.Player_y - (view_hview[0] / 2);
    var ang_dif =  v_ang_now - point_direction(mx0raw, my0raw, mx1raw ,my1raw);
    view_angle[0] = v_ang_prev + ang_dif;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Cover outside of the room
draw_set_color(c_black);
draw_rectangle(-1024, -1024, room_width + 1024, 0, false);
draw_rectangle(-1024, -1024, 0, room_height + 1024, false);
draw_rectangle(-1024, room_height, room_width + 1024, room_height + 1024, false);
draw_rectangle(room_width, -1024, room_width + 1024, room_height + 1024, false);
draw_set_color(c_white);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
